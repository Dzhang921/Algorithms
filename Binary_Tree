class BinaryTree:
    def __init__(self, rootObj):
        self.key = rootObj
        self.left = None
        self.right = None

    def insertLeft(self, newNode):
        if self.left == None:
            self.left = BinaryTree(newNode)
        # Push the current left child one level down
        else:
            t = BinaryTree(newNode)
            t.left = self.left
            self.left = t
    
    def insertRight(self, newNode):
        if self.right == None:
            self.right = BinaryTree(newNode)
        # Push the current right child one level down
        else:
            t = BinaryTree(newNode)
            t.right = self.right
            self.right = t
    
    def getRight(self):
        return self.right
    
    def getLeft(self):
        return self.left
    
    def setRoot(self, obj):
        self.key = obj
    
    def getRoot(self):
        return self.key


def buildParseTree(text):
    flist = text.split()
    stack = []
    eTree = BinaryTree('')
    stack.append(eTree)
    currentTree = eTree

    for i in flist:
        if i == '(':
            currentTree.insertLeft('')
            stack.append(currentTree)
            currentTree = currentTree.getLeft()

        elif i in ['+', '-', '*', '/']:
            currentTree.setRoot(i)
            currentTree.insertRight('')
            stack.append(currentTree)
            currentTree.getRight()
        elif i == ')':
            currentTree = stack.pop()
        
        elif i not in ['+', '-', '*', '/', ')']:
            try:
                currentTree.setRoot(int(i))
                parent = stack.pop()
                currentTree = parent
            except:
                raise ValueError('{} is not a valid integer'.format(i))
    
    return eTree



if __name__ == '__main__':
    print(buildParseTree("( ( 10 + 5 ) * 3 )"))